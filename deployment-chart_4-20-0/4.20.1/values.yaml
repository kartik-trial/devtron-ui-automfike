replicaCount: 1
MinReadySeconds: 60
MaxSurge: 1
MaxUnavailable: 0
GracePeriod: 30
ContainerPort:
    - name: app
      port: 8080
      servicePort: 80
      envoyPort: 8799
      envoyTimeout: 15s
      useHTTP2: false
      supportStreaming: false
      idleTimeout: 1800s
      protocol: TCP
    - name: app1
      port: 8090
      servicePort: 8080
      useGRPC: true
    - envoyPort: 8799
      idleTimeout: 1800s
      name: app
      port: 8080
      protocol: TCP
      servicePort: 80
      supportStreaming: false
      useHTTP2: false
pauseForSecondsBeforeSwitchActive: 30
waitForSecondsBeforeScalingDown: 30
autoPromotionSeconds: 30
Spec:
    Affinity:
        Key: ""
        Values: ""
affinity:
    enabled: false
    values: {}
image:
    pullPolicy: IfNotPresent
restartPolicy: Always
ambassadorMapping:
    enabled: false
    ambassadorId: ""
    cors: {}
    hostname: devtron.example.com
    labels: {}
    prefix: /
    retryPolicy: {}
    rewrite: ""
    tls:
        context: ""
        create: false
        hosts: []
        secretName: ""
autoscaling:
    enabled: false
    MinReplicas: 1
    MaxReplicas: 2
    annotations: {}
    labels: {}
    behavior: {}
    containerResource:
        enabled: false
        TargetCPUUtilizationPercentage: 90
        TargetMemoryUtilizationPercentage: 80
    extraMetrics: []
    TargetCPUUtilizationPercentage: 90
    TargetMemoryUtilizationPercentage: 80
kedaAutoscaling:
    enabled: false
    envSourceContainerName: ""
    cooldownPeriod: 300
    minReplicaCount: 1
    maxReplicaCount: 2
    idleReplicaCount: 0
    pollingInterval: 30
    fallback: {}
    advanced: {}
    triggers: []
    triggerAuthentication:
        enabled: false
        name: ""
        spec: {}
    authenticationRef: {}
secret:
    enabled: false
    data: {}
service:
    type: ClusterIP
    enabled: true
    annotations: {}
    sessionAffinity:
        enabled: false
    loadBalancerSourceRanges: []
istio:
    enable: false
    gateway:
        enabled: false
        labels: {}
        annotations: {}
        host: example.com
        tls:
            enabled: false
            secretName: example-secret
    virtualService:
        enabled: false
        labels: {}
        annotations: {}
        gateways: []
        hosts: []
        http: []
    destinationRule:
        enabled: false
        labels: {}
        annotations: {}
        subsets: []
        trafficPolicy: {}
    peerAuthentication:
        enabled: false
        labels: {}
        annotations: {}
        selector:
            enabled: false
        mtls:
            mode: ""
        portLevelMtls: {}
    requestAuthentication:
        enabled: false
        labels: {}
        annotations: {}
        selector:
            enabled: false
        jwtRules: []
    authorizationPolicy:
        enabled: false
        labels: {}
        annotations: {}
        action: null
        provider: {}
        rules: []
flaggerCanary:
    enabled: false
    labels: {}
    annotations: {}
    createIstioGateway:
        enabled: false
        labels: {}
        annotations: {}
        host: ""
        tls:
            enabled: false
            secretName: ""
    addOtherGateways: []
    addOtherHosts: []
    gatewayRefs: null
    serviceport: 8080
    targetPort: 8080
    portDiscovery: true
    appProtocol: http
    retries:
        attempts: 3
        perTryTimeout: 1s
        retryOn: gateway-error,connect-failure,refused-stream
    match:
        - uri:
              prefix: /
        - uri:
              prefix: /
    rewriteUri: /
    timeout: null
    headers: null
    corsPolicy: null
    analysis:
        interval: 15s
        threshold: 5
        maxWeight: 50
        stepWeight: 5
    thresholds:
        successRate: 90
        latency: 500
    loadtest:
        enabled: true
        url: http://flagger-loadtester.istio-system/
server:
    deployment:
        image_tag: 1d8175ff-357-20017
        image: quay.io/devtron/test
EnvVariablesFromFieldPath: []
EnvVariables: []
EnvVariablesFromSecretKeys: []
EnvVariablesFromConfigMapKeys: []
LivenessProbe:
    Path: ""
    port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3
    scheme: ""
    httpHeaders: []
    grpc: {}
    command: []
    tcp: false
ReadinessProbe:
    Path: ""
    port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3
    scheme: ""
    httpHeaders: []
    grpc: {}
    command: []
    tcp: false
StartupProbe:
    Path: ""
    port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3
    httpHeaders: []
    command: []
    tcp: false
    grpc: {}
prometheus:
    release: monitoring
servicemonitor:
    additionalLabels: {}
prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
ingress:
    enabled: false
    className: ""
    labels: {}
    annotations: {}
    hosts:
        - host: chart-example1.local
          pathType: ImplementationSpecific
          paths:
              - /example1
        - host: chart-example2.local
          pathType: ImplementationSpecific
          paths:
              - /example2
              - /example2/healthz
        - host: chart-example1.local
          pathType: ImplementationSpecific
          paths:
              - /example1
        - host: chart-example2.local
          pathType: ImplementationSpecific
          paths:
              - /example2
              - /example2/healthz
    tls: []
ingressInternal:
    enabled: false
    className: ""
    annotations: {}
    hosts:
        - host: chart-example1.internal
          pathType: ImplementationSpecific
          paths:
              - /example1
        - host: chart-example2.internal
          pathType: ImplementationSpecific
          paths:
              - /example2
              - /example2/healthz
        - host: chart-example1.internal
          pathType: ImplementationSpecific
          paths:
              - /example1
        - host: chart-example2.internal
          pathType: ImplementationSpecific
          paths:
              - /example2
              - /example2/healthz
    tls: []
winterSoldier:
    enabled: false
    apiVersion: pincher.devtron.ai/v1alpha1
    labels: {}
    annotations: {}
    type: Deployment
    timeRangesWithZone:
        timeRanges: []
        timeZone: Asia/Kolkata
    action: sleep
    targetReplicas: []
    fieldSelector:
        - AfterTime(AddTime(ParseTime({{metadata.creationTimestamp}},
          '2006-01-02T15:04:05Z'), '5m'), Now())
    annotation: {}
networkPolicy:
    enabled: false
    annotations: {}
    labels: {}
    podSelector:
        matchExpressions: []
        matchLabels: {}
    policyTypes: []
    ingress: []
    egress: []
dbMigrationConfig:
    enabled: false
command:
    enabled: false
    value: []
    workingDir: {}
args:
    enabled: false
    value:
        - /bin/sh
        - -c
        - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
resources:
    limits:
        cpu: "0.05"
        memory: 50Mi
    requests:
        cpu: "0.01"
        memory: 10Mi
volumeMounts: []
volumes: []
nodeSelector: {}
podExtraSpecs: {}
containerExtraSpecs: {}
orchestrator.deploymant.algo: 1
ConfigMaps:
    enabled: false
    maps: []
ConfigSecrets:
    enabled: false
    secrets: []
initContainers: []
containers: []
rawYaml: []
topologySpreadConstraints: []
envoyproxy:
    image: quay.io/devtron/envoy:v1.16.0
    lifecycle: {}
    configMapName: ""
    resources:
        limits:
            cpu: 50m
            memory: 50Mi
        requests:
            cpu: 50m
            memory: 50Mi
containerSpec:
    lifecycle:
        enabled: false
        preStop:
            exec:
                command:
                    - sleep
                    - "10"
        postStart:
            httpGet:
                host: example.com
                path: /example
                port: 90
podDisruptionBudget: {}
podSecurityContext: {}
containerSecurityContext: {}
serviceAccount:
    create: false
    name: ""
    annotations: {}
tolerations: []
imagePullSecrets: []
persistentVolumeClaim: {}
verticalPodScaling:
    enabled: false
secondaryWorkload:
    enabled: false
    Spec:
        Affinity:
            Key: ""
            Values: ""
    replicaCount: 1
    affinity: {}
    tolerations: []
    autoscaling:
        enabled: false
        containerResource:
            enabled: false
app: "236"
appLabels: {}
appMetrics: false
deployment:
    strategy:
        rolling:
            maxSurge: 25%
            maxUnavailable: 1
deploymentAnnotations: {}
deploymentLabels: {}
deploymentType: ROLLING
env: "2"
hostAliases: []
pipelineName: cd-236-nrbv
podAnnotations: {}
podLabels: {}
releaseVersion: "1"
